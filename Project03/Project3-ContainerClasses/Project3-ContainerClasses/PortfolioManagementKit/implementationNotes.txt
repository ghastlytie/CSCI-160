Implementation Notes for the Stock Portfolio Management Project

NOTE: this was originally written to use 2-D static arrays, while I have tried 
to edit out those things that refered to those arrays, I may have missed 
something, so if something doesn't make since, it may be that I missed an 
edit.


There are several ways to implement this solution.  Since this is OOD and OOP,
we should use classes.  First a Stock object which has
properties for the company name, an array of quotes, and  7 statistical 
values. The constructor would receive the name and the array of quotes and 
call each of the private calculation methods (one for each statistic). 
The Stock object would need a nicely formatted toString method. The details of
formatted strings are at the end of this document. And you should at the unit test
for this class before continuing. 

You should create a Portfolio class that has an ArrayList of Stock objects.  If you 
do the extra credit it will do more things, but otherwise it just needs an addStock()
method and a getStockAt() method like the ones in the AgilityContest.

GETTING THE INPUT

So the next goal is to read the data and store it in a Java ArrayList of Stock 
objects in a Portfolio object.  

You should create a Scanner to read the data file. Follow the example
from the readFile in the BookStore project for the try..catch block.
NOTE: The data is sanitized, you therefore will not need to use 
try..catch to parse the numerical values in the implementation
shown below.

Then a loop structure roughly like

String[] tokens = null;

while (not end of file){
    1. name gets the value of the nextLine
    2. String line gets the value of the nextLine
    3. split the line into separate tokens using spaces as the delimiter
      code: tokens = line.split("[ \\s]"); 
      (hint - the tokens.length is the number of quotes, so you can create an 
        array of exactly the right length for the prices)
    4. parse the tokens as doubles and put them into an array
      code:     for (int j = 0; j < tokens.length; j++) {
                    prices[j] = Double.parseDouble(tokens[j]);
                }
    
    add the stock to the portfolio 
       example: portfolio.addStock(new Stock(name, prices));
}

When you have completed this part, you should have
* a Portfolio with an ArrayList of Stock objects

You should test that you are reading the data in correctly and are able to print 
it back out before you continue!  The toString in the Stock object should 
initially print just the stock name and prices.  Once you have that working
correctly, you should change your toString to print the statistics instead.

CALCULATING AND STORING THE OUTPUT

During the calculation phase, you won't need the names of the companies, just 
the list of price quotes.
You will need to subscript the prices array to access it, but we
will think of it here as just a sequence of double values

p0 p1 p2 ...  p(n-1)

where n >= 1.  Note, if n = 1, then the sequence is just p0

You have a number of data values to calculate, some more difficult than
others, but if you consider each in isolation to the others you can determine
what you need to do.  We attack it that way here.

Each Stock object should be responsible for calculating it's own statistics.
The Portfolio object would need to calculate the extra credit statistics.
Printing the Portfolio should be done by  a toString in the Portfolio class 
that sends out a String that has the column headings and all of the Stock
statistics (one per line) concatenated together.  You should use a StringBuilder
for this.  

We consider each statistic in turn.  They will all involve keeping track of
some additional, residual values that summarize what you need to retain
from the earlier part of the row to incorporate the next value of the
row that you are scanning.

You can think of the iteration proceeding like 

initialize residual values
for (int i = 0; i < c; i++){
    look at next value, A[i];
    update residual values based on A[i];
}
calculate desired statistical value from residual values


Each of the following should be a method in the Stock class.

1. the minimum value:  calcMin(), calculateMinimum(), calculateMinVal()

At the end, you want to have the smallest value that you encountered in the
whole sequence;  essentially the residual value is the smallest value you 
have encountered up to but not including A[i], minSoFar, say,
and the update is

if (A[i] < minSoFar){
   minSoFar = A[i];
}
That just leaves the initialization.  Generally, we initialize a cumulative
variable to a neutral value that doesn't bias the result.  If we are 
accumulating a sum or a count, 0 is the right initial value.  If we are
initializing a product variable, 1 is the right initial value.  These choices
are correct because

sumSoFar = A[0] + 0;  
countSoFar = 1 + 0;
productSoFar = A[0] * 1;

in the first pass through the loop will give the cumulative variable the
appropriate value after seeing just the first value, A[0], in each case.

If we think of the cumulative operation as taking the minimum of the current
value and minSoFar,

minSoFar = minOf(A[i], minSoFar)

we want an initial value so that for ANY value of A[0],

minOf(A[0], minSoFar) == A[0]

which will be true provided

A[0] <= minSoFar

So the correct initialaization is minSoFar = A[0].

TEST THIS BEFORE CONTINUING!  Call this method in the constructor and add the property value to the output in the toString() method... then run the unit test.

2. the maximum value: calcMax(), calculateMaximum(), ...etc 

This is the flip side of the last one; the same reasoning applies.

TEST THIS BEFORE CONTINUING! Call this method in the constructor and add the property value to the output in the toString() method... then run the unit test.

3. the net change

This is simply last value - first value

with the array, this is just

A[n-1] - A[0]


TEST THIS BEFORE CONTINUING! Call this method in the constructor and add the property value to the output in the toString() method... then run the unit test.

4. the average

the average is defined as   (sum of all values)/n

so this reduces to accumulating the sum of all the array entries and 
performing the division.  I expect you know how to sum the values in 
an array.

TEST THIS BEFORE CONTINUING! Call this method in the constructor and add the property value to the output in the toString() method... then run the unit test.

5. the standard deviation

Although defined as the square root of the average of the sum of all 
the squares of (A[i] - average), which cannot be calculated w/o first 
obtaining the average, there is a clever way to manipulate the formula
so that it is in effect the square root of

(SumForJFrom0toN-1Of(A[i] * A[i]))/n - (average * average)

(see
https://en.wikipedia.org/wiki/Standard_deviation#Identities_and_mathematical_properties
)

You are already calculating the average and have n, so all you need is
to calculate the sum of the squares of the entries A[i] for a stock, and
you will have all you need to complete the calculation.

TEST THIS BEFORE CONTINUING! Call this method in the constructor and add the property value to the output in the toString() method... then run the unit test.

6. length of longest upward trend

In principle this is another find-the-maximum problem, but here it's 
not a maximum of individual values, but of lengths of upward trends.
Note that every value is the member of some upward trend, that if the
entire sequence is decreasing, then there are n upward trends of length 0,
and if the entire sequence is non-decreasing, there is one upward trend 
of length n-1.  Again, the calculation is easiest if you calculate in an 
auxiliary array

upwardTrendStartIndices

the first index of each upward trend.  Since there are at most n(and n is 
at most 30) this can be created to be of length 30.  Index 0 is always 
the start of the first upward trend, so

upwardTrendStartIndices[0] == 0

Suppose we have already seen the starts of upward trends

0, 1, ..., k-1 

and those slots of upwardTrendStartIndices are loaded correctly.  So we are
currently scanning upward trend k-1.  If we look at the current value we 
are scanning, A[i], and compare it to the previous value

A[i-1]  (note, we must have i > 0 to do this)

we have

A[i] >= A[i-1]  or A[i] < A[i-1]

In the first case, A[i] extends the upward trend we are working on, k-1,
and in the second, A[i-1] is seen to be the end of upward trend k-1, 
so i is the start index of upward trend k, so we can do

upwardTrendStartIndices[k] = i;

The test is

if (A[i] < A[i-1]){
   upwardTrendStartIndices[k] = i-1;
   k++; // to advance to the next slot
}
 
If we maintain k's value as we go, then when we complete A[i], we 
will have the number of upward trends in k, and the start indices 
for each in 

upwardTrendStartIndices[0]
upwardTrendStartIndices[1]
...
upwardTrendStartIndices[k-2]
upwardTrendStartIndices[k-1]

The length of upward trend j can be calculated from the start index for
it and the start index of trend i+1(or n, if i is the last upward trend
given).  So, scanning this array and keeping track of the maximum of the
values

upwardTrendStartIndices[i+1] - upwardTrendStartIndices[i] - 1

as i runs from 0 to k-2, and comparing it to the value for the length
of the last upward trend, which will be

n - upwardTrendStartIndices[k-1] - 1

you can get the length of the longest upward trend.

TEST THIS BEFORE CONTINUING! Call this method in the constructor and add the property value to the output in the toString() method... then run the unit test.

7. best upward trend growth rate

Again, this is a maximum value problem.  For upward trend i, 0 <= i < k-1,
we have

the value at the END of the trend is

A[upwardTrendStartIndices[i+1]-1]

at the START of the trend is

A[upwardTrendStartIndices[i]]

and the length calculation is as before.  You should only perform the
division if the length is > 0.

For the last upward trend, k-1, the last value is just A[n-1].  Again,
if upwardTrendStartIndices[k-1] == n - 1, then the length of the 
trend is 0 and you should not perform the division.  Otherwise, it's
length is positive and you can calculate the difference of the
extremities and divide by the length to get its value.

You can initialize a maxSoFar value to Double.NEGATIVE_INFINITY, scan through
the upwardTrendStartIndices array, and every time you see a trend whose
length is > 0, calculate its growth rate and update the maxSoFar value.
Don't forget to consider the last upward trend!

Since these are a little complicated, it may be best to attack each
one separately, but as you do the later ones, you may see that you can adapt
or merge what you've earlier.  You should not have to scan over the array
A of price quotations more than once.  

After processing each row A[i] of price quotations, you should have
all you need to calculate the statistics for that company.  You can
store the results into the properties with those statistics names.

DISPLAYING THE OUTPUT

To get a table's columns to line up nicely, you will need to use the String.format along with your StringBuilder for example:

str.append(String.format("%5.2f", minimum));

will put pad out minimum with spaces on the left to make a string of width 5
with 2 positions behind the decimal.  NOTE the decimal point itself counts
as one postiion in the width so 5.2 will only work nicely if your numbers have
single digits to the left of the decimal -- make that number larger to leave
spece between entries.


For double values,

String.format("%w.df", dExp) 

will round dExp to d digits after the decimal point and pad it out with spaces
on the left to make a string of length w.  For example,

String.format("10.2f", 42.145) is  "     42.15"
String.format("10.1f", 42.145) is  "      42.1"

Note, when d is 0, this will round to the nearest whole number, and suppress
the decimal point.

String.format("10.0f", 42.145) is  "        42"

For whole number values,

String.format("%5d", 2)   is "    2"
String.format("%8d", -30) is "     -30".

For Strings we would rather have them left justified so we use a negative 
spaceing. For example,  

String.format("%-7s", "cat") is "cat    "

 

You need to determine the length of the longest value you could see in a column,
say it's L, then add one to it to allow for a separating space character, and
then use L+1 as the field width for that column in the String.format method
calls.   Assuming that all price quotes will be in (0,1000), you can use the
following widths

name 20
Low, Hi, Ave, Deviation 7 (biggest value is xxx.xx)
Net 8(to accomodate the minus sign, when present)
Longest upward trend 3(can never be more than 29)
Best trend rate 10 (can never be more than the following value)
Best period rate 10(if a stock went from 0.01 to 1000, that would be 100000.00
Best period index 3(can never be more than 28)


EXTRA CREDIT

Extra Credit options are intended to challenge you, so the notes won't suggest
how to solve them.

TESTING YOUR PROGRAM

You must test your program on a variety of input files that exercise different
aspects of the program and-- most importantly-- for which you know what the correct
answers should be.

I supply training test files

test0.txt
test1.txt
test2.txt

with example results (Your output should go to the console NOT to a file!)

out0.txt
out1.txt
out2.txt

You can test your program's results against mine.  If there are discrepancies,
then it is possible that my solution has a bug, but you should perform a 
manual check yourself.  If you still believe yours is correct, bring it to
my attention.

You can be sure that I will test your program on other files, and you may
want to develop test cases yourself to test other features.